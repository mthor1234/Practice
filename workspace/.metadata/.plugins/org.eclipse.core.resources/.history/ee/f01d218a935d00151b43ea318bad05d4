package dijkstra;

import java.util.ArrayList;

public class Dijkstra {
	ArrayList<Node> unVisited = new ArrayList<Node>();
	ArrayList<Node> visited = new ArrayList<Node>();
	Node currNode, goalNode;
	Graph graph;
	
	
	public Dijkstra(Node start, Node goal, Graph g){
		currNode = start;
		goalNode = goal;
		graph = g;
		
		for(Node n: g.nodes){
			n.distance = 99999999;	// Set the distance of each node initially to infinity
			unVisited.add(n);
		}
		
		currNode.distance = 0;		// Set the start node distance to 0
	}

	public void search(){
		System.out.println("Current Node: " + currNode.id);
		while(unVisited.size() > 0){
			
			
			if(currNode == goalNode){
				System.out.println("Total Distance: " + currNode.distance);
				
				System.out.print("Path: ");

				for(int i = 0; i < visited.size(); i++){
				System.out.print(visited.get(i).id + "->");
				}
				System.out.print(goalNode.id);

				return;
			}
			for(int i = 0; i < currNode.edges.size(); i++){
				if(currNode.edges.get(i).rightNode.distance >
				currNode.edges.get(i).weight){
					
					currNode.edges.get(i).rightNode.distance = currNode.distance + currNode.edges.get(i).weight;	
				}
				
			}
			unVisited.remove(currNode);
			visited.add(currNode);
			currNode = currNode.selectNeighbor(visited);
			System.out.println("Current Node: " + currNode.id);

		}
	}
	
	public Node getSmallestDist(ArrayList<Node> list){
		Node minNode = null;
		int minNum = 9999999;
		
		for(Node n: list){
			if(n.distance < minNum){
				minNode = n;
				minNum = n.distance;
			}
		}
		return minNode;
	}
	
	
}
