import java.util.Scanner;

import binaryheap.BinaryHeap;
import binarytree.BinaryTree;
import LinkedList.StackLinkedList;
import Stack.Stack;

// This Class is used to launch different data structure examples
public class Main {

	// Holds the Stack object
	private static Stack stack;
	
	private static StackLinkedList stackLinkedList;
	
	
	private static BinaryTree bst = new BinaryTree();
	private static BinaryHeap minHeap = new BinaryTree();



	
	// The main method... Runs the program selection menu
	public static void main(String[] args) {
		Scanner reader = new Scanner(System.in);
		System.out.println("Enter '1' to start stack");
		System.out.println("Enter '2' to start stack Linked List");
		
		System.out.println("Enter '4' to start Binary Search Tree");
		System.out.println("Enter '5' to start Min Binary Heap");


		
		int userChoice = reader.nextInt();
		
		if(userChoice == 1){
			stack = new Stack();
			handleStackInput();
		}
		
		else if(userChoice == 2){
			stackLinkedList = new StackLinkedList();
			handleStackLinkedInput();
		}
		
		
		
		
		
		else if(userChoice == 4){
			stackLinkedList = new StackLinkedList();
			handleBSTInput();
		}
		
		else if(userChoice == 5){
			stackLinkedList = new StackLinkedList();
			handleBinaryHeap();
		}
		
	}
	
	// Handles the user input if the Stack program is chosen... User can select Push, Pop, Peek, Print, or Quit
	public static void handleStackInput(){
		Scanner reader = new Scanner(System.in);
		System.out.println("Welcome to the 'Stack Experience'...\n "
				+ "Type 'push' to push a number onto the stack... \n"
				+ "Type 'pop' to pop a number off of the stack... \n"
				+ "Type 'peek' to look at the top of the stack....\n"
				+ "Type 'print' to print off the stack.... \n"
				+ "Type 'q' to quit at anytime");
		
		String userChoice = reader.next();
		
		
			while(!userChoice.equalsIgnoreCase("q")){
				
				if(userChoice.equalsIgnoreCase("push")){
					System.out.println("Type a number to push onto the stack ");
					Scanner read = new Scanner(System.in);
					int pushNumber = reader.nextInt();

					stack.push(pushNumber);
				}
				
				else if(userChoice.equalsIgnoreCase("pop")){
					stack.pop();
				}
				
				else if(userChoice.equalsIgnoreCase("peek")){
					stack.peek();
				}
				
				else if(userChoice.equalsIgnoreCase("print")){
					stack.printStack();
				}
				
				else if(userChoice.equalsIgnoreCase("q")){
					break;
				}
				
				else{
				System.out.println("Command not found, try again!");

				}
				
				handleStackInput();
			}
		}
	
	// Handles the user input if the Stack program is chosen... User can select Push, Pop, Peek, Print, or Quit
		public static void handleStackLinkedInput(){
			Scanner reader = new Scanner(System.in);
			System.out.println("Welcome to the 'Stack Linked List Experience'...\n "
					+ "Type 'push' to push a number onto the stack... \n"
					+ "Type 'pop' to pop a number off of the stack... \n"
					+ "Type 'find' to look at the top of the stack....\n"
					+ "Type 'print' to print off the stack.... \n"
					+ "Type 'q' to quit at anytime");
			
			String userChoice = reader.next();
			
			
				while(!userChoice.equalsIgnoreCase("q")){
					
					if(userChoice.equalsIgnoreCase("push")){
						System.out.println("Type a number to push onto the stack ");
						Scanner read = new Scanner(System.in);
						int pushNumber = reader.nextInt();

						stackLinkedList.push(pushNumber);
					}
					
					else if(userChoice.equalsIgnoreCase("pop")){
						stackLinkedList.pop();
					}
					
					else if(userChoice.equalsIgnoreCase("find")){
						System.out.println("Type a number to find ");
						Scanner read = new Scanner(System.in);
						int num = reader.nextInt();
						stackLinkedList.find(num);
					}
					
					else if(userChoice.equalsIgnoreCase("print")){
						stackLinkedList.print();
					}
					
					else if(userChoice.equalsIgnoreCase("q")){
						break;
					}
					
					else{
					System.out.println("Command not found, try again!");

					}
					
					handleStackLinkedInput();
				}
			}
		
		
		
		
		
		// Handles the user input if the Stack program is chosen... User can select Push, Pop, Peek, Print, or Quit
				public static void handleBSTInput(){
					Scanner reader = new Scanner(System.in);
					System.out.println("Welcome to the 'BST Experience'...\n "
							+ "Enter a root value!");
					
					
						Scanner read = new Scanner(System.in);
						int rootNumber = reader.nextInt();
						bst.root.setValue(rootNumber);
					
						input();
						
				}
				
				public static void input(){
						
					
					boolean quit = false;
					Scanner reader = new Scanner(System.in);	
					
						System.out.println("Type 'i' to insert a node \n"
							+ "Type 'in' to inOrderTraverse the BST \n"
							+ "Type 'pre' to PreOrderTraversal the BST \n"
							+ "Type 'min' to find minimum of the BST \n"
							+ "Type 'max' to find minimum of the BST \n"
							+ "Type 'q' to quit at anytime");
					
					String userChoice = reader.next();
					
						while(!userChoice.equalsIgnoreCase("q")){
							
							if(userChoice.equalsIgnoreCase("i")){
								System.out.println("Type a number to enter into the BST ");
								Scanner readInt = new Scanner(System.in);
								int pushNumber = readInt.nextInt();

								bst.insertNode(bst.root, pushNumber);
							}
							
							else if(userChoice.equalsIgnoreCase("in")){
								bst.inOrderTraversal(bst.root);
							}
							else if(userChoice.equalsIgnoreCase("pre")){
								bst.preOrderTraversal(bst.root);
							}
							else if(userChoice.equalsIgnoreCase("min")){
								System.out.println("Minimum value: " + bst.findMinimum(bst.root).getValue());
							}
							else if(userChoice.equalsIgnoreCase("max")){
								System.out.println("Max value: " + bst.findMaximum(bst.root).getValue());
							}
							
							else if(userChoice.equalsIgnoreCase("q")){
								quit = true;
								break;
							}
							
							else{
							System.out.println("Command not found, try again!");

							}
							reader = new Scanner(System.in);	
							userChoice = reader.next();

						}
						if(quit == true){
							System.out.println("Quitting!");
						}
						else{
						input();
						}

					}
				
				// Handles the user input if the Stack program is chosen... User can select Push, Pop, Peek, Print, or Quit
				public static void handleBinaryHeap(){
					Scanner reader = new Scanner(System.in);
					System.out.println("Welcome to the ' Min Binary Heap Experience'...\n "
							+ "Enter a root value!");
					
						int rootNumber = reader.nextInt();
						minHeap.root.setValue(rootNumber);
					
						boolean quit = false;
						
						Scanner read = new Scanner(System.in);	
						
							System.out.println("Type 'i' to insert a node \n"
								+ "Type 'in' to inOrderTraverse the BST \n"
								+ "Type 'pre' to PreOrderTraversal the BST \n"
								+ "Type 'min' to find minimum of the BST \n"
								+ "Type 'max' to find minimum of the BST \n"
								+ "Type 'q' to quit at anytime");
						
						String userChoice = read.next();
						
							while(!userChoice.equalsIgnoreCase("q")){
								
								if(userChoice.equalsIgnoreCase("i")){
									System.out.println("Type a number to enter into the BST ");
									Scanner readInt = new Scanner(System.in);
									int pushNumber = readInt.nextInt();

									minHeap.insert(minHeap.root, pushNumber);
								}
								
								else if(userChoice.equalsIgnoreCase("pre")){
									minHeap.preOrderTraversal(minHeap.root);
								}
							
								
								else if(userChoice.equalsIgnoreCase("q")){
									quit = true;
									break;
								}
								
								else{
								System.out.println("Command not found, try again!");

								}
								reader = new Scanner(System.in);	
								userChoice = reader.next();

							}
							if(quit == true){
								System.out.println("Quitting!");
							}
							else{
							handleBinaryHeap();
							}

						}						
	
}
